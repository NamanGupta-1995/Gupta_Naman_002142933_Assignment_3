/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.PatientDirectory;
import model.Person;
import model.PersonDirectory;
import model.VitalSignHistory;
import model.VitalSigns;

/**
 *
 * @author namangupta
 */
public class FilterJPanel extends javax.swing.JPanel {

    /**
     * Creates new form FilterJPanel
     */
    PersonDirectory personDirectory;
    PatientDirectory patientDiectory;
    VitalSignHistory vs;
    int column; 
    
    public FilterJPanel(PersonDirectory person, PatientDirectory patient, VitalSignHistory vs) {
        initComponents();
        this.personDirectory = person;
        this.patientDiectory = patient;
        this.vs = vs;
        populatePatientsTable(this.personDirectory.getPersonDirectory());
    }

    private void populatePatientsTable(ArrayList<Person> personsList) {
        DefaultTableModel model = (DefaultTableModel) tblPatient.getModel();
        model.setRowCount(0);
        if (personsList.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No Patient found. Please add"
                    + " Patient", "Warning", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        int i = 0;

        for (Person person : personsList) {
            if (person.getPatient().getVitalSignHistory() != null) {
                for (VitalSigns vs : person.getPatient().getVitalSignHistory().getVitalSign()) {
                    Object[] row = new Object[4];
                    row[0] = person;
                    row[1] = person.getPatient().getId();
                    row[2] = person.getCommunity();
                    row[3] = person.getPatient().getStatus();
                    model.addRow(row);
                    i++;
                }

            }
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPatient = new javax.swing.JTable();
        ddfilter = new javax.swing.JComboBox<>();
        txtFilter = new javax.swing.JTextField();

        lblTitle.setText("FILTER PATIENTS");

        tblPatient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "PATIENT NAME", "PATIENT ID", "PATIENT COMMUNITY", "PATIENT STATUS"
            }
        ));
        jScrollPane1.setViewportView(tblPatient);

        ddfilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "PATIENT NAME", "PATIENT ID", "PATIENT COMMUNITY", "PATIENT STATUS" }));
        ddfilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ddfilterActionPerformed(evt);
            }
        });

        txtFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFilterActionPerformed(evt);
            }
        });
        txtFilter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtFilterKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFilterKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblTitle)
                .addGap(392, 392, 392))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(ddfilter, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 670, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 871, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(lblTitle)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ddfilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 257, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void ddfilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ddfilterActionPerformed
        // TODO add your handling code here:
        column = ddfilter.getSelectedIndex();
    }//GEN-LAST:event_ddfilterActionPerformed

    private void txtFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFilterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFilterActionPerformed

    private void txtFilterKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFilterKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFilterKeyPressed

    private void txtFilterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFilterKeyReleased
        // TODO add your handling code here:
        String value = txtFilter.getText();
        Filter(column, value);
    }//GEN-LAST:event_txtFilterKeyReleased

    private  void Filter(int column, String query){
        
        List<Person> filteredPatient = new ArrayList<Person>();
        List<Person> x = new ArrayList<Person>();

        filteredPatient.addAll(this.personDirectory.getPersonDirectory());
        
        if(column == 0){
          x = filteredPatient.stream().filter(o -> o.getName().equals(query)).toList();
        }
        else if(column ==1){
          x = filteredPatient.stream().filter(o -> o.getPatient().getId().equals(query)).toList();
        }
        else if(column ==2){
          x = filteredPatient.stream().filter(o -> o.getCommunity().equals(query) && o.getPatient().getStatus() == "Abnormal").toList();
        }
        else if(column ==3){
          x = filteredPatient.stream().filter(o -> o.getPatient().getStatus().equals(query)).toList();
        }

        
        DefaultTableModel model = (DefaultTableModel) tblPatient.getModel();
        model.setRowCount(0);
        
        for(Person person: x){
            Object[] row = new Object[9];
            row[0] = person;
            row[1] = person.getPatient().getId();
            row[2] = person.getCommunity();
            row[3] = person.getPatient().getStatus();
            
            model.addRow(row);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ddfilter;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblPatient;
    private javax.swing.JTextField txtFilter;
    // End of variables declaration//GEN-END:variables
}
