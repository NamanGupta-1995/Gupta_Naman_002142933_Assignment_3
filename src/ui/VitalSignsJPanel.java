/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Patient;
import model.PatientDirectory;
import model.Person;
import model.PersonDirectory;
import model.VitalSignHistory;
import model.VitalSigns;

/**
 *
 * @author namangupta
 */
public class VitalSignsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form VitalSignsJPanel
     */
    
    PersonDirectory personDirectory;
    PatientDirectory patientDirectory;
    VitalSignHistory vitalSignHistory;
    
    public VitalSignsJPanel(PatientDirectory patientDirectory, PersonDirectory personDirectory, VitalSignHistory vitalSignHistory) {
        initComponents();
        this.patientDirectory = patientDirectory;
        this.personDirectory = personDirectory;
        this.vitalSignHistory = vitalSignHistory;
        populatePatientsTable(personDirectory.getPersonDirectory());
        populatePatientsVitalSignTable(personDirectory.getPersonDirectory(), vitalSignHistory.getVitalSign());
    }

    
    private void populatePatientsTable(ArrayList<Person> personsList) {
        DefaultTableModel model = (DefaultTableModel) tblPatient.getModel();
        model.setRowCount(0);
        if(personsList.isEmpty())
        {
            JOptionPane.showMessageDialog(this, "No Patient found. Please add"
                    + " Patient", "Warning", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        for (Person person : personsList) {
            Object[] row = new Object[4];
            row[0] = person;
            row[1] = person.getAge();
            row[2] = person.getPatient().getId();
            model.addRow(row);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPatient = new javax.swing.JTable();
        lblAddVitalTitle = new javax.swing.JLabel();
        lblBodyTemp = new javax.swing.JLabel();
        txtBodyTemp = new javax.swing.JTextField();
        lblBloodPres = new javax.swing.JLabel();
        txtBloodPres = new javax.swing.JTextField();
        lblBodySugar = new javax.swing.JLabel();
        txtBloodSugar = new javax.swing.JTextField();
        btnSaveVitals = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblVitalSign = new javax.swing.JTable();
        btnUpdateVitals = new javax.swing.JButton();

        lblTitle.setText("VITAL SIGNS");

        tblPatient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "PATIENT NAME", "PATIENT AGE", "PATIENT ID"
            }
        ));
        jScrollPane1.setViewportView(tblPatient);

        lblAddVitalTitle.setText("ADD VITAL SIGNS");

        lblBodyTemp.setText("ENTER BODY TEMPERATURE");

        txtBodyTemp.setText("jTextField1");

        lblBloodPres.setText("ENTER BLOOD PRESSURE");

        txtBloodPres.setText("jTextField2");

        lblBodySugar.setText("ENTER BODY SUGAR");

        txtBloodSugar.setText("jTextField3");

        btnSaveVitals.setText("SAVE");
        btnSaveVitals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveVitalsActionPerformed(evt);
            }
        });

        tblVitalSign.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "PATIENT NAME", "PATIENT ID", "BLOOD PRESSURE", "BLOOD SUGAR", "BODY TEMPERATURE", "DATE OF VISIT", "STATUS"
            }
        ));
        jScrollPane2.setViewportView(tblVitalSign);

        btnUpdateVitals.setText("UPDATE VITAL SIGNS");
        btnUpdateVitals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateVitalsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(423, 423, 423)
                        .addComponent(lblTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 847, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(280, 280, 280)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblBloodPres)
                            .addComponent(lblBodyTemp)
                            .addComponent(lblBodySugar))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtBodyTemp, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                            .addComponent(txtBloodPres)
                            .addComponent(txtBloodSugar)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(415, 415, 415)
                        .addComponent(lblAddVitalTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 845, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(27, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnSaveVitals)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUpdateVitals)
                .addGap(254, 254, 254))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnSaveVitals, btnUpdateVitals});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(lblAddVitalTitle)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBodyTemp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtBodyTemp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBloodPres)
                    .addComponent(txtBloodPres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBloodSugar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBodySugar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSaveVitals)
                    .addComponent(btnUpdateVitals))
                .addGap(24, 24, 24)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveVitalsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveVitalsActionPerformed
        // TODO add your handling code here:
        if(tblPatient.getSelectedRow() >= 0){
        int selectedRow = tblPatient.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tblPatient.getModel();
        Person selectedPerson = (Person) model.getValueAt(selectedRow, 0);
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
        LocalDateTime now = LocalDateTime.now();
        String date = dtf.format(now);

        VitalSigns vs = vitalSignHistory.createAndAddVitalSign();
        String updatedBodyTemp = txtBodyTemp.getText();
        String updatedBloodPressure = txtBloodPres.getText();
        String updatedBloodSugar = txtBloodSugar.getText();
        
        vs.setBloodPressure(Integer.parseInt(updatedBloodPressure));
        vs.setBodyTemperature(Integer.parseInt(updatedBodyTemp));
        vs.setSugar(Integer.parseInt(updatedBloodSugar));
        vs.setTime(date);
        
        String status = VitalSignStatus(selectedPerson.getAge(),vs);
        
        vs.setStatus(status);
        selectedPerson.getPatient().setStatus(status);
        //vitalSignHistory.addVitalSigns(vs);

        selectedPerson.getPatient().setVitalSignHistory(vitalSignHistory);
        
        
        JOptionPane.showMessageDialog(this, "Vital Sign Added.");
        
                
        populatePatientsTable(personDirectory.getPersonDirectory());
        populatePatientsVitalSignTable(personDirectory.getPersonDirectory(), vitalSignHistory.getVitalSign());
        
        txtBodyTemp.setText("");
        txtBloodPres.setText("");
        txtBloodSugar.setText("");
        }
        else{
            JOptionPane.showMessageDialog(this, "Please select a patient from table ");
        }

    }//GEN-LAST:event_btnSaveVitalsActionPerformed

    private void btnUpdateVitalsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateVitalsActionPerformed
        // TODO add your handling code here:

        int selectedRow = tblPatient.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tblPatient.getModel();
        Person selectedPerson = (Person) model.getValueAt(selectedRow, 0);
        txtBodyTemp.setText(String.valueOf(model.getValueAt(selectedRow, 4)));
        txtBloodPres.setText(String.valueOf(model.getValueAt(selectedRow, 2)));
        txtBloodSugar.setText(String.valueOf(model.getValueAt(selectedRow, 3)));
    }//GEN-LAST:event_btnUpdateVitalsActionPerformed


    private String VitalSignStatus(int patientAge, VitalSigns vitalSign) {
        
        String vitalSignStatus = "Normal";
        
        double bodyTemperature = vitalSign.getBodyTemperature();
        int bloodPressure = vitalSign.getBloodPressure();
        int sugar = vitalSign.getSugar();
        
        /*Toddler*/
        if (patientAge >= 1 && patientAge <= 5) {
            if ((bodyTemperature < 97 || bodyTemperature > 99) /*Respiration Rate*/
                    || (sugar < 70 || sugar > 100) /*Heart Rate*/
                    || (bloodPressure < 80 || bloodPressure > 110) /*Blood Pressure*/) {
                vitalSignStatus = "Abnormal";
            }
        }
        /*Preschooler*/
        if (patientAge >= 6 && patientAge <= 10) {
            if ((bodyTemperature < 97 || bodyTemperature > 99)
                    || (sugar < 70 || sugar > 110)
                    || (bloodPressure < 80 || bloodPressure > 110)) {
                vitalSignStatus = "Abnormal";
            }
        }
        /*School Age*/
        if (patientAge >= 11 && patientAge <= 18) {
            if ((bodyTemperature < 97 || bodyTemperature > 99)
                    || (sugar < 70 || sugar > 120)
                    || (bloodPressure < 80 || bloodPressure > 120)) {
                vitalSignStatus = "Abnormal";
            }
        }
        /*Adolescent*/
        if (patientAge >= 18 && patientAge <= 30) {
            if ((bodyTemperature < 97 || bodyTemperature > 99)
                    || (sugar < 55 || sugar > 130)
                    || (bloodPressure < 70 || bloodPressure > 120)) {
                vitalSignStatus = "Abnormal";
            }
        }
        if(patientAge >= 31){
            if((bodyTemperature < 97 || bodyTemperature > 99)
                    || (sugar < 55 || sugar > 145)
                    || (bloodPressure < 70 || bloodPressure > 120)) {
                vitalSignStatus = "Abnormal";
            }
        }
        
        return vitalSignStatus;
    }
    
    private void populatePatientsVitalSignTable(ArrayList<Person> personsList, ArrayList<VitalSigns> vitalSignHistory) {
        DefaultTableModel model = (DefaultTableModel) tblVitalSign.getModel();
        model.setRowCount(0);
        if (personsList.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No Patient found. Please add"
                    + " Patient", "Warning", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        int i = 0;
        for (Person person : personsList) {
            if(person.getPatient().getVitalSignHistory() != null){
                for (VitalSigns vs : person.getPatient().getVitalSignHistory().getVitalSign()) {

                Object[] row = new Object[8];
                row[0] = person;
                row[1] = person.getPatient().getId();
                ArrayList<VitalSigns> vitals = person.getPatient().getVitalSignHistory().getVitalSign();
                row[2] = vitals.get(i).getBloodPressure();
                row[3] = vitals.get(i).getSugar();
                row[4] = vitals.get(i).getBodyTemperature();
                row[5] = vitals.get(i).getTime();
                row[6] = vitals.get(i).getStatus();
                model.addRow(row);
                i++;
            }
            }
            
        }

    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSaveVitals;
    private javax.swing.JButton btnUpdateVitals;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblAddVitalTitle;
    private javax.swing.JLabel lblBloodPres;
    private javax.swing.JLabel lblBodySugar;
    private javax.swing.JLabel lblBodyTemp;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblPatient;
    private javax.swing.JTable tblVitalSign;
    private javax.swing.JTextField txtBloodPres;
    private javax.swing.JTextField txtBloodSugar;
    private javax.swing.JTextField txtBodyTemp;
    // End of variables declaration//GEN-END:variables
}
